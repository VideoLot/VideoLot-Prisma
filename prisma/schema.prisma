generator client {
  provider = "prisma-client-js"
  output   = "../client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(User)
  accounts      Account[]
  sessions      Session[]
  history       Subscribtion[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SubscribtionTier {
  id             String         @id @default(cuid())
  isActive       Boolean
  name           String
  description    String
  cost           Decimal
  durationDays   Int
  history        Subscribtion[]
  affectedVideos VideoData[]    @relation("TierToVideo")
}

model Subscribtion {
  id                 String           @id @default(cuid())
  subscribtionTierId String
  subscriberId       String
  expirationDate     DateTime
  createdAt          DateTime         @default(now())
  subscriber         User             @relation(fields: [subscriberId], references: [id])
  subscribtionTier   SubscribtionTier @relation(fields: [subscribtionTierId], references: [id])
}

model VideoData {
  id                String             @id @default(cuid())
  title             String
  previewURL        String
  alt               String
  views             Int
  tags              String[]
  uploadedDate      DateTime
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  audioTracks       AudioTrack[]
  VideoProcess      UploadState?
  videoTrack        VideoTrack?
  categories        Category[]         @relation("CategoryToVideoData")
  avaliableForTiers SubscribtionTier[] @relation("TierToVideo")
}

model TrackInfo {
  id            String      @id @default(cuid())
  segmentsCount Int
  duration      Int
  codec         String
  trackPath     String
  quality       String
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  audioTrack    AudioTrack?
  videoTrack    VideoTrack?
}

model VideoTrack {
  id          String    @id @default(cuid())
  videoDataId String    @unique
  trackInfoId String    @unique
  trackInfo   TrackInfo @relation(fields: [trackInfoId], references: [id])
  videoData   VideoData @relation(fields: [videoDataId], references: [id])
}

model AudioTrack {
  id          String    @id @default(cuid())
  videoDataId String
  trackInfoId String    @unique
  trackInfo   TrackInfo @relation(fields: [trackInfoId], references: [id])
  videoData   VideoData @relation(fields: [videoDataId], references: [id])
}

model UploadState {
  id          String      @id @default(cuid())
  videoDataId String      @unique
  stage       UploadStage
  stageStage  StageStatus
  filePath    String
  progress    Float
  videoData   VideoData   @relation(fields: [videoDataId], references: [id])
}

model Panel {
  id        String    @id @default(cuid()) @unique
  type      PanelType
  title     String?
  content   Json
  path      String?
  version   Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id     String      @id @default(cuid())
  name   String
  videos VideoData[] @relation("CategoryToVideoData")
}

enum UserRole {
  Admin
  Moderator
  User
}

enum UploadStage {
  Uploading
  Processing
  Deploying
  Complite
}

enum StageStatus {
  InProgress
  Complite
  Failed
}

enum PanelType {
  Root
  Horizontal
  Grid
}
